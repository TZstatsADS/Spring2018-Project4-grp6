kernel = "radial")
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(0.1, 1, 0.1), gamma = seq(0.001, 0.06, 0.002),
kernel = "radial")
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(1, 5, 1), gamma = seq(0.001, 0.06, 0.002),
kernel = "radial")
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(1, 5, 1), gamma = seq(0.01, 0.06, 0.005),
kernel = "radial")
linear_predict <- predict(svm.linear$best.model, test[,-1])
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(1, 5, 1), gamma = seq(0.004, 0.04, 0.004),
kernel = "radial")
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(1, 5, 1), gamma = seq(0.004, 0.04, 0.004),
kernel = "radial")
library(e1071)
train_5 <- read.csv("train.5.txt", header = FALSE)
train_6 <- read.csv("train.6.txt", header = FALSE)
labels <- rep(c(-1,1), c(nrow(train_5), nrow(train_6)))
labels <- as.factor(labels)
data_complete <- rbind(train_5, train_6)
data_complete <- cbind(labels, data_complete)
rows <- nrow(data_complete)
set.seed(2018)
test_samples <- sample(1:rows, 0.2*rows)
train <- data_complete[-test_samples, ]
test <- data_complete[test_samples, ]
svm.linear <- tune.svm(labels ~ ., data = train, cost = seq(0.001, 0.06, 0.002), kernel = "linear")
svm.linear
plot(svm.linear)
linear_predict <- predict(svm.linear$best.model, test[,-1])
linear_error <- mean(linear_predict != test[,1])
linear_error
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(1, 10, 2), gamma = seq(0.004, 0.04, 0.004),
kernel = "radial")
?seq
pnorm(1.64)
1-pnorm(1.64)
dnorm(1.64)
packages.used=c("caret","gbm", "e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "EBImage", "mxnet", "pbapply", "ggthemes")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
#library(EBImage)
#library(mxnet)
library(pbapply)
library(ggthemes)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
LR_hog <- train_lr(train_hog)
LR_hog <- train_lr.cv(train_hog)
datasplit_hog <- data_split("hog_extraction1")
train_hog <- datasplit_hog$df_train
test_hog <- datasplit_hog$df_test
LR_hog <- train_lr.cv(train_hog)
save(LR_hog,file="../output/LR_hog.RData")
load("../output/LR_hog.RData")
LR_hog.time <- LR_hog$time
LR_hog.time
LR.test.result_hog <- test(LR_hog, test_hog)
LR.test.accuracy_hog <- mean(LR.test.result_hog == test_hog[,1])
LR.test.accuracy_hog
install.packages("mxnet")
library(mxnet)
?arima.sim
?ts.plot
train3 <- read.csv("train_3.txt", header = FALSE)
train8 <- read.csv("train_8.txt", header = FALSE)
train_complete <- rbind(train3, train8)
labels <- c(rep(1, nrow(train3)), rep(-1, nrow(train8)))
labels <- as.factor(labels)
?classify
library(MASS)
data1 <-data("birthwt")
class(birthwt$ptl)
library(MASS)
data1 <-data("birthwt")
fit.mult = glm(low ~ I(ptl > 0) + age, data = birthwt, family='binomial')
summary(fit.mult)
?legend
View(birthwt)
age_LOE_25 <- data1[data1$age <= 25, ]
age_More_25 <- data1[data1$age > 25, ]
age_LOE_25 <- birthwt[birthwt$age <= 25, ]
age_More_25 <- birthwt[birthwt$age > 25, ]
prob1 <- sum(age_LOE_25[age_LOE_25$ptl>0, ]$lwt == 1)/nrow(age_LOE_25)
prob1
prob1 <- sum(age_LOE_25[age_LOE_25$ptl > 0, ]$low == 1)/nrow(age_LOE_25)
prob1
prob2 <- sum(age_More_25[age_More_25$ptl == 0, ]$low == 1)/nrow(age_More_25)
prob2
prob1 <- sum(age_LOE_25[age_LOE_25$ptl > 0, ]$low == 1)/nrow(age_LOE_25[age_LOE_25$ptl > 0, ])
prob1
prob2 <- sum(age_More_25[age_More_25$ptl == 0, ]$low == 1)/nrow(age_More_25$ptl == 0, ])
prob2
prob2 <- sum(age_More_25[age_More_25$ptl == 0, ]$low == 1)/nrow(age_LOE_25[age_More_25$ptl == 0, ])
prob2
prob1 <- sum(age_LOE_25[age_LOE_25$ptl > 0, ]$low == 1)/nrow(age_LOE_25[age_LOE_25$ptl > 0, ])
prob1
prob2 <- sum(age_More_25[age_More_25$ptl == 0, ]$low == 1)/nrow(age_LOE_25[age_More_25$ptl == 0, ])
prob2
prob2 <- sum(age_More_25[age_More_25$ptl == 0, ]$low == 1)/nrow(age_More_25[age_More_25$ptl == 0, ])
prob2
evaluation_roc <- function(roc_value, pred_mat, Movie_test){
## function to calculate ROC of predicted value
## Input: roc_value= 4 (according to the paper 2)
##        pred_mat - predicted value
##        test_mat - test data matrix
## Output: roc
roc_mat <- matrix(roc_value, nrow = nrow(pred_mat), ncol = ncol(pred_mat))
same <- sum((pred_mat >= roc_mat) == (Movie_test >= roc_mat), na.rm=TRUE)
n <- sum(!is.na(pred_mat))
return(same/n)
}
evaluation_mae <- function(pred_mat, Movie_test){
## function to calculate mean absolute error of predicted value
## Input: pred_mat - predicted value
##        Movie_test - test data matrix
## Output: MAE
mae <- mean(abs(pred_mat - Movie_test), na.rm = T)
return(mae)
}
prediction<-function(df,sim_mat,nbor_list){
df.new<-df   #copy for calculating the mean by control NA.
for (i in 1:nrow(df.new)){
df.new[i,]<-ifelse(df.new[i,]==0,NA,df.new[i,])
}
df.mean<-matrix(rep(rowMeans(df.new,na.rm=T),each=ncol(df)),nrow=nrow(df),byrow = T)
pred<-matrix(NA,ncol=ncol(df),nrow=nrow(df))
for (i in 1:nrow(df)){
ind<-nbor_list[[i]]
nbors_mat<-df[ind,]
w<-as.matrix(sim_mat[i,ind]/sum(sim_mat[i,ind]))
nei.demean <- as.matrix(nbors_mat-df.mean[ind,])
pred.a<- df.mean[i,1] + (t(w) %*% (nei.demean))
rm.ind<-which(df[i,]==1)
pred.a[rm.ind]<-0
pred[i,]<-pred.a
}
for (i in 1:nrow(df)){
pred[i,]<-ifelse(pred[i,]<0,0,pred[i,])
}
rownames(pred)<-rownames(df)
colnames(pred)<-colnames(df)
return(pred)
}
find_neighbours<-function(sim_mat,method='combined',threshold=NA,n=NA){
#####Input: similarity matrix
#####       method: weighthres, bestn, combined
#####       threshold
#####Output: index of neighbours
stopifnot(method=='weighthres'|method=='combined'|method=='bestn')
neighbours<-list()
if (method=='weighthres'){
for (i in 1:nrow(sim_mat)){
sel<-ifelse(abs(sim_mat[i,])>threshold,1,0)[-i]
neighbours[[i]]<-which(sel==1)
}
}else{
if(method=='bestn'){
for (i in 1:nrow(sim_mat)){
neighbours[[i]]<-order(sim_mat[i,],decreasing = T)[-i][1:n]
}
}else{
for(i in 1:nrow(sim_mat)){
sel.w<-which(ifelse(abs(sim_mat[i,])>threshold,1,0)[-i]==1)
sel.b<-order(sim_mat[i,],decreasing = T)[-i][1:n]
neighbours[[i]]<-intersect(sel.w,sel.b)
}
}
}
null <- (1:length(neighbours))[lapply(neighbours,length) == 0]
if(length(null)!=0){
for (i in 1:length(null)){
index <- null[i]
neighbours[[index]] <- null[i]
}
}
return(neighbours)
}
Movie_weights <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_Spearman_weights.csv")
data1 <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_data_train.csv")
movietest <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_data_test.csv")
movietest <- movietest[,-1]
numeric_movietest <- NULL
for(i in 1:ncol(movietest)) {
numeric_movietest <- cbind(numeric_movietest, as.numeric(movietest[,i]))
}
Movie_neighbors <- find_neighbours(Movie_weights[,-1], method = "bestn" , n = 60)
movie_prediction <- prediction(data1[, -1], Movie_weights[, -1], Movie_neighbors)
prediction<-function(df,sim_mat,nbor_list){
df.new<-df   #copy for calculating the mean by control NA.
for (i in 1:nrow(df.new)){
df.new[i,]<-ifelse(df.new[i,]==0,NA,df.new[i,])
}
df.mean<-matrix(rep(rowMeans(df.new,na.rm=T),each=ncol(df)),nrow=nrow(df),byrow = T)
pred<-matrix(NA,ncol=ncol(df),nrow=nrow(df))
for (i in 1:nrow(df)){
ind<-nbor_list[[i]]
nbors_mat<-df[ind,]
w<-as.matrix(sim_mat[i,ind]/sum(sim_mat[i,ind]))
nei.demean <- as.matrix(nbors_mat-df.mean[ind,])
pred.a<- df.mean[i,1] + (w %*% (nei.demean))
rm.ind<-which(df[i,]==1)
pred.a[rm.ind]<-0
pred[i,]<-pred.a
}
for (i in 1:nrow(df)){
pred[i,]<-ifelse(pred[i,]<0,0,pred[i,])
}
rownames(pred)<-rownames(df)
colnames(pred)<-colnames(df)
return(pred)
}
movie_prediction <- prediction(data1[, -1], Movie_weights[, -1], Movie_neighbors)
dataframe_movie_prediction <- data.frame(movie_prediction)
eval_roc_Spearman <- evaluation_roc(4, as.matrix(movie_prediction), as.matrix(movietest))
eval_roc_Spearman
eval_mae_Spearman <- evaluation_mae(as.matrix(dataframe_movie_prediction), as.matrix(numeric_movietest))
eval_mae_Spearman
Movie_neighbors <- find_neighbours(Movie_weights[,-1], method = "bestn" , n = 20)
movie_prediction <- prediction(data1[, -1], Movie_weights[, -1], Movie_neighbors)
dataframe_movie_prediction <- data.frame(movie_prediction)
eval_roc_Spearman <- evaluation_roc(4, as.matrix(movie_prediction), as.matrix(movietest))
eval_roc_Spearman
eval_mae_Spearman <- evaluation_mae(as.matrix(dataframe_movie_prediction), as.matrix(numeric_movietest))
eval_mae_Spearman
###### Using ROC and MAE on data set 2 (Movie data) ##############
## ROC
evaluation_roc <- function(roc_value, pred_mat, Movie_test){
## function to calculate ROC of predicted value
## Input: roc_value= 4 (according to the paper 2)
##        pred_mat - predicted value
##        test_mat - test data matrix
## Output: roc
dataframe_movie_prediction <- data.frame(pred_mat)
for (i in 1:nrow(dataframe_movie_prediction)){
dataframe_movie_prediction[i,]<-ifelse(dataframe_movie_prediction[i,]==0,NA,dataframe_movie_prediction[i,])
}
pred_mat <- as.matrix(dataframe_movie_prediction)
roc_mat <- matrix(roc_value, nrow = nrow(pred_mat), ncol = ncol(pred_mat))
same <- sum((pred_mat >= roc_mat) == (Movie_test >= roc_mat), na.rm=TRUE)
n <- sum(!is.na(pred_mat))
return(same/n)
}
## MAE
evaluation_mae <- function(pred_mat, Movie_test){
## function to calculate mean absolute error of predicted value
## Input: pred_mat - predicted value
##        Movie_test - test data matrix
## Output: MAE
mae <- mean(abs(pred_mat - Movie_test), na.rm = T)
return(mae)
}
find_neighbours<-function(sim_mat,method='combined',threshold=NA,n=NA){
#####Input: similarity matrix
#####       method: weighthres, bestn, combined
#####       threshold
#####Output: index of neighbours
stopifnot(method=='weighthres'|method=='combined'|method=='bestn')
neighbours<-list()
if (method=='weighthres'){
for (i in 1:nrow(sim_mat)){
sel<-ifelse(abs(sim_mat[i,])>threshold,1,0)
ind<-which(sel==1)
neighbours[[i]]<-ind[which(ind!=i)]
}
}else{
if(method=='bestn'){
for (i in 1:nrow(sim_mat)){
ord<-order(abs(sim_mat[i,]),decreasing = T)
neighbours[[i]]<-ord[which(ord!=i)][1:n]
}
}else{
for(i in 1:nrow(sim_mat)){
ind.w<-which(ifelse(abs(sim_mat[i,])>threshold,1,0)==1)
sel.w<-ind.w[which(ind.w!=i)]
ord.b<-order(abs(sim_mat[i,]),decreasing = T)
sel.b<-ord.b[which(ord.b!=i)][1:n]
neighbours[[i]]<-intersect(sel.w,sel.b)
}
}
}
null <- (1:length(neighbours))[lapply(neighbours,length) == 0]
if(length(null)!=0){
for (i in 1:length(null)){
index <- null[i]
neighbours[[index]] <- null[i]
}
}
return(neighbours)
}
prediction<-function(df,sim_mat,nbor_list){
df.new<-df   #copy for calculating the mean by control NA.
for (i in 1:nrow(df.new)){
df.new[i,]<-ifelse(df.new[i,]==0,NA,df.new[i,])
}
df.mean<-matrix(rep(rowMeans(df.new,na.rm=T),each=ncol(df)),nrow=nrow(df),byrow = T)
pred<-matrix(NA,ncol=ncol(df),nrow=nrow(df))
for (i in 1:nrow(df)){
ind<-nbor_list[[i]]
nbors_mat<-df[ind,]
w<-as.matrix(sim_mat[i,ind]/sum(sim_mat[i,ind]))
nei.demean <- as.matrix(nbors_mat-df.mean[ind,])
pred.a<- df.mean[i,1] + (w %*% (nei.demean))
rm.ind<-which(df[i,]==1)
pred.a[rm.ind]<-0
pred[i,]<-pred.a
}
for (i in 1:nrow(df)){
pred[i,]<-ifelse(pred[i,]<0,0,pred[i,])
}
rownames(pred)<-rownames(df)
colnames(pred)<-colnames(df)
return(pred)
}
Movie_weights <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_Spearman_weights.csv")
data1 <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_data_train.csv")
movietest <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_data_test.csv")
movietest <- movietest[,-1]
numeric_movietest <- NULL
for(i in 1:ncol(movietest)) {
numeric_movietest <- cbind(numeric_movietest, as.numeric(movietest[,i]))
}
TimeStart2 <- Sys.time()
movie_neighbors_weighthres <- find_neighbours(Movie_weights[,-1], method = "weighthres" , threshold = 0.3)
movie_prediction_weighthres <- prediction(data1[, -1], Movie_weights[, -1], movie_neighbors_weighthres)
TimeEnd2 <- Sys.time()
dataframe_movie_prediction_weighthres <- data.frame(movie_prediction_weighthres)
eval_roc_Spearman_weighthres <- evaluation_roc(4, as.matrix(movie_prediction_weighthres), as.matrix(movietest))
eval_roc_Spearman_weighthres
eval_mae_Spearman_weighthres <- evaluation_mae(as.matrix(dataframe_movie_prediction_weighthres), as.matrix(numeric_movietest))
eval_mae_Spearman_weighthres
RunningTime2 <- TimeEnd2 - TimeStart2
RunningTime2
source("prediction.R")
find_neighbours<-function(sim_mat,method='combined',threshold=NA,n=NA){
#####Input: similarity matrix
#####       method: weighthres, bestn, combined
#####       threshold
#####Output: index of neighbours
stopifnot(method=='weighthres'|method=='combined'|method=='bestn')
neighbours<-list()
if (method=='weighthres'){
for (i in 1:nrow(sim_mat)){
sel<-ifelse(abs(sim_mat[i,])>threshold,1,0)
ind<-which(sel==1)
neighbours[[i]]<-ind[which(ind!=i)]
}
}else{
if(method=='bestn'){
for (i in 1:nrow(sim_mat)){
ord<-order(abs(sim_mat[i,]),decreasing = T)
neighbours[[i]]<-ord[which(ord!=i)][1:n]
}
}else{
for(i in 1:nrow(sim_mat)){
ind.w<-which(ifelse(abs(sim_mat[i,])>threshold,1,0)==1)
sel.w<-ind.w[which(ind.w!=i)]
ord.b<-order(abs(sim_mat[i,]),decreasing = T)
sel.b<-ord.b[which(ord.b!=i)][1:n]
neighbours[[i]]<-intersect(sel.w,sel.b)
}
}
}
null <- (1:length(neighbours))[lapply(neighbours,length) == 0]
if(length(null)!=0){
for (i in 1:length(null)){
index <- null[i]
neighbours[[index]] <- null[i]
}
}
return(neighbours)
}
prediction<-function(df,sim_mat,nbor_list){
df.new<-df   #copy for calculating the mean by control NA.
for (i in 1:nrow(df.new)){
df.new[i,]<-ifelse(df.new[i,]==0,NA,df.new[i,])
}
df.mean<-matrix(rep(rowMeans(df.new,na.rm=T),each=ncol(df)),nrow=nrow(df),byrow = T)
pred<-matrix(NA,ncol=ncol(df),nrow=nrow(df))
for (i in 1:nrow(df)){
ind<-nbor_list[[i]]
nbors_mat<-df[ind,]
w<-as.matrix(sim_mat[i,ind]/sum(sim_mat[i,ind]))
nei.demean <- as.matrix(nbors_mat-df.mean[ind,])
pred.a<- df.mean[i,1] + (w %*% (nei.demean))
rm.ind<-which(df[i,]==1)
pred.a[rm.ind]<-0
pred[i,]<-pred.a
}
for (i in 1:nrow(df)){
pred[i,]<-ifelse(pred[i,]<0,0,pred[i,])
}
rownames(pred)<-rownames(df)
colnames(pred)<-colnames(df)
return(pred)
}
Movie_weights <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_Spearman_weights.csv")
Movie_weights <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_Spearman_weights.csv")
data1 <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_data_train.csv")
movietest <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_data_test.csv")
movietest <- movietest[,-1]
numeric_movietest <- NULL
for(i in 1:ncol(movietest)) {
numeric_movietest <- cbind(numeric_movietest, as.numeric(movietest[,i]))
}
# neighbors of method bestn
TimeStart1 <- Sys.time()
Movie_neighbors <- find_neighbours(Movie_weights[,-1], method = "bestn" , n = 60)
evaluation_mae <- function(pred_mat, Movie_test){
## function to calculate mean absolute error of predicted value
## Input: pred_mat - predicted value
##        Movie_test - test data matrix
## Output: MAE
for (i in 1:nrow(pred_mat)){
pred_mat[i,]<-ifelse(pred_mat[i,]==0,NA,pred_mat[i,])
}
mae <- mean(abs(pred_mat - Movie_test), na.rm = T)
return(mae)
}
TimeStart1 <- Sys.time()
Movie_neighbors <- find_neighbours(Movie_weights[,-1], method = "bestn" , n = 60)
Movie_MSD_weights <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_msd_weight.csv")
# neighbors of method bestn
TimeStart4 <- Sys.time()
Movie_MSD_neighbors <- find_neighbours(Movie_MSD_weights[,-1], method = "bestn" , n = 60)
movie_prediction_MSD <- prediction(data1[, -1], Movie_MSD_weights[, -1], Movie_MSD_neighbors)
TimeEnd4 <- Sys.time()
dataframe_movie_MSD_prediction <- data.frame(movie_prediction_MSD)
#eval_roc_MSD <- evaluation_roc(4, as.matrix(movie_prediction_MSD), as.matrix(movietest))
#eval_roc_MSD
eval_mae_MSD <- evaluation_mae(as.matrix(dataframe_movie_MSD_prediction), as.matrix(numeric_movietest))
eval_mae_MSD
RunningTime4 <- TimeEnd4 - TimeStart4
RunningTime4
TimeStart5 <- Sys.time()
movie_MSD_neighbors_weighthres <- find_neighbours(Movie_MSD_weights[,-1], method = "weighthres" , threshold = 0.3)
movie_prediction_MSD_weighthres <- prediction(data1[, -1], Movie_MSD_weights[, -1], movie_MSD_neighbors_weighthres)
TimeEnd5 <- Sys.time()
dataframe_movie_prediction_MSD_weighthres <- data.frame(movie_prediction_MSD_weighthres)
#eval_roc_MSD_weighthres <- evaluation_roc(4, as.matrix(movie_prediction_MSD_weighthres), as.matrix(movietest))
#eval_roc_MSD_weighthres
eval_mae_MSD_weighthres <- evaluation_mae(as.matrix(dataframe_movie_prediction_MSD_weighthres), as.matrix(numeric_movietest))
eval_mae_MSD_weighthres
RunningTime5 <- TimeEnd5 - TimeStart5
RunningTime5
TimeStart6 <- Sys.time()
movie_MSD_neighbors_combined <- find_neighbours(Movie_MSD_weights[,-1], method = "combined" , threshold = 0.3, n = 60)
movie_prediction_MSD_combined <- prediction(data1[, -1], Movie_MSD_weights[, -1], movie_MSD_neighbors_combined)
TimeEnd6 <- Sys.time()
dataframe_movie_prediction_MSD_combined <- data.frame(movie_prediction_MSD_combined)
#eval_roc_MSD_combined <- evaluation_roc(4, as.matrix(movie_prediction_MSD_combined), as.matrix(movietest))
#eval_roc_MSD_combined
eval_mae_MSD_combined <- evaluation_mae(as.matrix(dataframe_movie_prediction_MSD_combined), as.matrix(numeric_movietest))
eval_mae_MSD_combined
RunningTime6 <- TimeEnd6 - TimeStart6
RunningTime6
eval_mae_MSD_combined <- evaluation_mae(as.matrix(dataframe_movie_prediction_MSD_combined), as.matrix(numeric_movietest))
eval_mae_MSD_combined
View(Movie_MSD_weights)
(sum(Movie_MSD_weights)-nrow(Movie_MSD_weights))/(nrow(Movie_MSD_weights)*(nrow(Movie_MSD_weights)-1))
(sum(Movie_MSD_weights[,-1])-nrow(Movie_MSD_weights[,-1]))/(nrow(Movie_MSD_weights[,-1])*(nrow(Movie_MSD_weights[,-1])-1))
View(Movie_MSD_weights)
setwd("~/Spring2018-Project4-grp6")
getwd()
movie_train<-read.csv("../data/eachmovie_sample/data_train")
setwd("C:/StudyLife/Columbia/STAT 5243/Project 2/Spring2018-Project4-grp6/doc")
movie_train<-read.csv("../data/eachmovie_sample/data_train")
movie_train<-read.csv("../data/eachmovie_sample/data_train.csv")
setwd("C:/StudyLife/Columbia/STAT 5243/Project 2/Spring2018-Project4-grp6/doc")
movie_train<-read.csv("../data/eachmovie_sample/data_train.csv")
movie_train<-read.csv("../data/eachmovie_sample/data_train.csv")
movie_train<-read.csv("../data/eachmovie_sample/data_train.csv")
movie_train<-read.csv("../data/eachmovie_sample/data_train.csv")
movie_train<-read.csv("../data/data_sample/eachmovie_sample/data_train.csv")
MS.Data.Transform.Function <- function(data){
usernum <- which(data$V1 == 'C')
userid <- data$V2[usernum]
vrootid <- unique(data$V2[which(data$V1 == 'V')])
table <- matrix(0, nrow=length(userid), ncol=length(vrootid))
rownames(table) <- as.character(userid)
colnames(table) <- as.character(vrootid)
for (i in 1:length(usernum)){
start.indx <- usernum[i]
if (i != length(usernum)){
end.indx <- usernum[i+1]
}
else {
end.indx <- nrow(data)+1
}
userid_mat <- as.character(userid[i])
for (j in (start.indx+1):(end.indx-1)){
vrootid_mat <- as.character(data$V2[j])
table[userid_mat, vrootid_mat] <- 1
}
}
return(table)
}
transformed.traindata <- MS.Data.Transform.Function(MS_train)
