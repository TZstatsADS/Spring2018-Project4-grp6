data2
library("Ecdat")
data("CRSPmon")
data2 <- CRSPmon
data2
pca = prcomp(data2,scale = TRUE)
pca <- prcomp(data2,scale = TRUE)
pca
summary(pca)
summary(pca1)
pca1 <- prcomp(data2,scale = TRUE)
pca1
summary(pca1)
?prcomp
pca1
summary(pca1)
pca1
pca1 <- prcomp(data2[,1:3],scale = TRUE)
pca1
summary(pca1)
pca1
summary(pca1)
plot(pca1)
pca1
summary(pca1)
pca1
head(data2)
data2
data2[3]
head(data2)
data2 <- data.frame(data2)
View(data2)
pc11 <- c(0.6284832, 0.5937757, 0.5024334) * data2[1, 1:3]
View(pc11)
data2 <- data.frame(data2)
pc11 <- c(0.6284832, 0.5937757, 0.5024334) * data2[1, 1:3]
pc12 <- c(-0.2093695, -0.4929652, 0.8444819) * data2[1, 1:3]
pc13 <- c(-0.7491150, 0.6359369, 0.1855019) * data2[1, 1:3]
pc21 <- c(0.6284832, 0.5937757, 0.5024334) * data2[2, 1:3]
pc22 <- c(-0.2093695, -0.4929652, 0.8444819) * data2[2, 1:3]
pc23 <- c(-0.7491150, 0.6359369, 0.1855019) * data2[2, 1:3]
pca1
pca$x
pca$x[1:2, 1:3]
data1 <- read.table("FamaFrench_mon_69_98.txt", header = TRUE)
library("Ecdat")
data2 <- CRSPmon
pca1 <- prcomp(data2[,1:3],scale = TRUE)
pca1
summary(pca1)
pca1$x[1:2, 1:3]
pca1$x[1:2, 1:3]
pca1$x[1:2, ]
View(data1)
pca1$x[1:2, ]
head(pca1$x)
ge <- 100*CRSPmon[1:180, 1] - RF
ge <- 100*CRSPmon[1:180, 1] - data1$RF
ibm <- 100*CRSPmon[1:180, 2] - data1$RF
mobil <- 100*CRSPmon[1:180, 3] - data1$RF
stocks <- cbind(ge,ibm,mobil)
fit <- lm(cbind(ge,ibm,mobil)~Mkt.RF+SMB+HML)
ge <- 100*CRSPmon[1:180, 1] - data1$RF
ibm <- 100*CRSPmon[1:180, 2] - data1$RF
mobil <- 100*CRSPmon[1:180, 3] - data1$RF
stocks <- cbind(ge,ibm,mobil)
fit <- lm(cbind(ge,ibm,mobil)~Mkt.RF+SMB+HML, data = data1)
fit
pca1$x[1:2, ]
ge <- 100*CRSPmon[1:180, 1] - data1$RF
ibm <- 100*CRSPmon[1:180, 2] - data1$RF
mobil <- 100*CRSPmon[1:180, 3] - data1$RF
stocks <- cbind(ge,ibm,mobil)
fit <- lm(cbind(ge,ibm,mobil)~Mkt.RF[1:180] + SMB[1:180] + HML[1:180], data = data1)
ge <- 100*CRSPmon[1:180, 1] - data1$RF[1:180]
ibm <- 100*CRSPmon[1:180, 2] - data1$RF[1:180]
mobil <- 100*CRSPmon[1:180, 3] - data1$RF[1:180]
stocks <- cbind(ge,ibm,mobil)
fit <- lm(cbind(ge,ibm,mobil) ~ Mkt.RF[1:180] + SMB[1:180] + HML[1:180], data = data1)
fit
ge1 <- 100*CRSPmon[181:360, 1] - data1$RF[181:360]
ibm1 <- 100*CRSPmon[181:360, 2] - data1$RF[181:360]
mobil1 <- 100*CRSPmon[181:360, 3] - data1$RF[181:360]
stocks1 <- cbind(ge1,ibm1,mobil1)
fit1 <- lm(cbind(ge1,ibm1,mobil1) ~ Mkt.RF[181:360] + SMB[181:360] + HML[181:360], data = data1)
fit1
ge <- 100*CRSPmon[1:180, 1] - data1$RF[1:180]
ibm <- 100*CRSPmon[1:180, 2] - data1$RF[1:180]
mobil <- 100*CRSPmon[1:180, 3] - data1$RF[1:180]
stocks <- cbind(ge,ibm,mobil)
fit <- lm(cbind(ge,ibm,mobil) ~ Mkt.RF[1:180] + SMB[1:180] + HML[1:180], data = data1)
fit
shiny::runApp('C:/StudyLife/Columbia/STAT 5243/Project 2/Spring2018-Project2-Group8/app')
runApp('C:/StudyLife/Columbia/STAT 5243/Project 2/Spring2018-Project2-Group8/app')
runApp('C:/StudyLife/Columbia/STAT 5243/Project 2/Spring2018-Project2-Group8/app')
install.packages("mvtnorm")
library(mvtnorm)
library(mvtnorm)
FT = 0.0346
C = pmvnorm(lower=c(-Inf,-Inf),upper=c(qnorm(FT),qnorm(FT)),
sigma=matrix(c(1,0.5,0.5,1),2,2))
val1 <- 1000000*exp(-0.04*1)*(FT+FT-C)
val1
1000000*exp(-0.04*1)*(FT+FT-C)
val1 <- 1000000*exp(-0.04*1)*(FT+FT-C)
val1
val1[1]
val2 <- 1000000*exp(-0.04*1)*C
val2
rbinom
?rbinom
binorm
rbinom(1,5,0.5)
pnorm(0.018,0,1)
pnorm(0.015,0,1)
pnorm(0.015,-0.001,0.015)
1-pnorm(0.015,-0.001,0.015)
pnorm(0.018,0.002,0.016)
1-pnorm(0.018,0.002,0.016)
qnorm(0.9,0,1)
1000000*(1.28*0.016-0.002)
qnorm(0.95,0,1)
1000*(1.64*0.2-0.1)
((18230/1000000)+0.002)/0.016
qt(0.9,2)
?qt
1000*(1.89*0.016-0.002)
qt(0.9,5)
qt(0.9,2)
1000*(1.48*0.016-0.002)
1000000*(1.64*(0.15+0.5*0.5*0.5*0.15)-0.05)
1000000*(1.64*0.5*0.5*0.5*0.15-0.05)
1000000*(1.64*0.5*0.15-0.05)
pnorm(1.64,0,1)
dnorm(1.64,0,1)
install.packages("survival")
install.packages("MASS")
install.packages("muhaz")
?dnorm
z1 = c(0,42,51,53,60,64)
ev1 = c(1,1*7/8, 1*7/8*4/7,1*7/8*4/7*1,1*7/8*4/7*1*2/3,0)
plot(z1,ev1,type = "s")
points(53,1*7/8*4/7,pch = 3)
points(60,1*7/8*4/7*1*2/3,pch=3)
z2 = c(42,51,51,51,53,60,60,64)
ev2 = c(1,1,1,1,0,1,0,1)
plot(survfit(Surv(z2,ev2)~1),conf.int= FALSE, mark.time = TRUE)
z2 = c(42,51,51,51,53,60,60,64)
ev2 = c(1,1,1,1,0,1,0,1)
plot(survfit(Surv(z2,ev2)~1),conf.int= FALSE, mark.time = TRUE)
library(survival)
library(MASS)
library(muhaz)
library(survival)
library(MASS)
library(muhaz)
z1 = c(0,42,51,53,60,64)
ev1 = c(1,1*7/8, 1*7/8*4/7,1*7/8*4/7*1,1*7/8*4/7*1*2/3,0)
plot(z1,ev1,type = "s")
points(53,1*7/8*4/7,pch = 3)
points(60,1*7/8*4/7*1*2/3,pch=3)
library(survival)
library(MASS)
library(muhaz)
z1 = c(0,42,51,53,60,64)
ev1 = c(1,1*7/8, 1*7/8*4/7,1*7/8*4/7*1,1*7/8*4/7*1*2/3,0)
plot(z1,ev1,type = "s")
points(53,1*7/8*4/7,pch = 3)
points(60,1*7/8*4/7*1*2/3,pch=3)
z2 = c(42,51,51,51,53,60,60,64)
ev2 = c(1,1,1,1,0,1,0,1)
plot(survfit(Surv(z2,ev2)~1),conf.int= FALSE, mark.time = TRUE)
##if TRUE, then curves are marked at each censoring time which is not also a death time.
train_5 <- read.csv("train.5.txt", header = FALSE)
train_6 <- read.csv("train.6.txt", header = FALSE)
labels <- rep(c(-1,1), c(nrow(train_5), nrow(train_6)))
labels <- as.factor(labels)
library(e1071)
train_complete <- rbind(train_5, train_6)
train_complete <- cbind(labels, train_complete)
View(train_complete)
?sample
rows <- nrow(train_complete)
test_samples <- sample(1:rows, 0.2*rows)
set.seed(2018)
test_samples <- sample(1:rows, 0.2*rows)
test_samples <- sample(1:rows, 0.2*rows)
set.seed(2018)
test_samples <- sample(1:rows, 0.2*rows)
library(e1071)
train_5 <- read.csv("train.5.txt", header = FALSE)
train_6 <- read.csv("train.6.txt", header = FALSE)
labels <- rep(c(-1,1), c(nrow(train_5), nrow(train_6)))
labels <- as.factor(labels)
data_complete <- rbind(train_5, train_6)
data_complete <- cbind(labels, train_complete)
rows <- nrow(data_complete)
set.seed(2018)
test_samples <- sample(1:rows, 0.2*rows)
train <- data_complete[-test_samples, ]
test <- data_complete[test_samples, ]
?tune.svm
svm.linear <- tune.svm(labels ~ ., data = data_complete)
svm.linear <- tune.svm(labels ~ ., data = data_complete, cost = c(10^(-4:4)), kernel = "linear")
svm.linear <- tune.svm(labels ~ ., data = data_complete, cost = c(10^(-4:4)), kernel = "linear")
svm.linear <- tune.svm(x = data_complete[, -1], y = data_complete[, 1], cost = c(10^(-4:4)), kernel = "linear")
svm.linear <- tune.svm(x = train, y = test, cost = c(10^(-4:4)), kernel = "linear")
View(train)
svm.linear <- tune.svm(labels ~ ., data = train, cost = c(10^(-4:4)), kernel = "linear")
seq(0.001, 0.08, 0.002)
library(e1071)
train_5 <- read.csv("train.5.txt", header = FALSE)
train_6 <- read.csv("train.6.txt", header = FALSE)
labels <- rep(c(-1,1), c(nrow(train_5), nrow(train_6)))
labels <- as.factor(labels)
data_complete <- rbind(train_5, train_6)
data_complete <- cbind(labels, train_complete)
library(e1071)
train_5 <- read.csv("train.5.txt", header = FALSE)
train_6 <- read.csv("train.6.txt", header = FALSE)
labels <- rep(c(-1,1), c(nrow(train_5), nrow(train_6)))
labels <- as.factor(labels)
data_complete <- rbind(train_5, train_6)
data_complete <- cbind(labels, data_complete)
rows <- nrow(data_complete)
set.seed(2018)
test_samples <- sample(1:rows, 0.2*rows)
train <- data_complete[-test_samples, ]
test <- data_complete[test_samples, ]
svm.linear <- tune.svm(labels ~ ., data = train, cost = c(10^(-4:4)), kernel = "linear")
svm.linear
svm.linear
svm.linear <- tune.svm(labels ~ ., data = train, cost = seq(0.001, 0.08, 0.002), kernel = "linear")
svm.linear
svm.linear <- tune.svm(labels ~ ., data = train, cost = seq(0.001, 0.06, 0.002), kernel = "linear")
svm.linear
seq(1, 10, 2)
seq(0.004, 0.04, 0.004)
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(0.01, 0.6, 0.02), gamma = seq(0.001, 0.06, 0.002))
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(0.01, 0.6, 0.02), gamma = seq(0.001, 0.06, 0.002),
kernel = "radial")
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(0.01, 0.6, 0.02), gamma = seq(0.001, 0.06, 0.002),
kernel = "radial")
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(0.002, 0.08, 0.002), gamma = seq(0.001, 0.06, 0.002),
kernel = "radial")
plot(svm.linear)
digit5 = read.table(paste(base_loc, "train.5.txt", sep=""), header=F, sep=",")
digit6 = read.table(paste(base_loc, "train.6.txt", sep=""), header=F, sep=",")
n1 = dim(digit5)[1]
n2 = dim(digit6)[1]
p =  dim(digit5)[2]
## set training and testing
test_prop = 0.2
index1 = sample(n1, round(test_prop * n1), replace=F)  # index for testing
index2 = sample(n2, round(test_prop * n2), replace=F)
xtest  = rbind(digit5[index1, ], digit6[index2, ])
xtrain = rbind(digit5[-index1, ], digit6[-index2, ])
ytest  = factor(c(rep("5", length(index1)), rep("6", length(index2))))
ytrain = factor(c(rep("5", n1 - length(index1)), rep("6", n2 - length(index2))))
## Q2, Q3: perform linear / RBF - SVM with k = 10 fold CV
# default for tune.svm() is 10-fold CV
tune_svm1 = tune.svm(x = xtrain, y = ytrain,
cost = seq(0.001, 0.08, 0.002), kernel="linear")
#pdf(width = 7, height = 7, file = paste(base_loc, "3-1.pdf", sep=""))
plot(tune_svm1, main = "tuning on Cost(C) of linear-SVM")
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(0.002, 0.08, 0.002), gamma = seq(0.001, 0.06, 0.002),
kernel = "radial")
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(0.02, 0.08, 0.002), gamma = seq(0.001, 0.06, 0.002),
kernel = "radial")
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(1, 10, 2), gamma = seq(0.004, 0.04, 0.004),
kernel = "radial")
svm.nonlinear
heatmap(svm.nonlinear)
plot(svm.nonlinear)
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(0.1, 1, 0.02), gamma = seq(0.001, 0.06, 0.002),
kernel = "radial")
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(0.1, 1, 0.1), gamma = seq(0.001, 0.06, 0.002),
kernel = "radial")
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(1, 5, 1), gamma = seq(0.001, 0.06, 0.002),
kernel = "radial")
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(1, 5, 1), gamma = seq(0.01, 0.06, 0.005),
kernel = "radial")
linear_predict <- predict(svm.linear$best.model, test[,-1])
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(1, 5, 1), gamma = seq(0.004, 0.04, 0.004),
kernel = "radial")
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(1, 5, 1), gamma = seq(0.004, 0.04, 0.004),
kernel = "radial")
library(e1071)
train_5 <- read.csv("train.5.txt", header = FALSE)
train_6 <- read.csv("train.6.txt", header = FALSE)
labels <- rep(c(-1,1), c(nrow(train_5), nrow(train_6)))
labels <- as.factor(labels)
data_complete <- rbind(train_5, train_6)
data_complete <- cbind(labels, data_complete)
rows <- nrow(data_complete)
set.seed(2018)
test_samples <- sample(1:rows, 0.2*rows)
train <- data_complete[-test_samples, ]
test <- data_complete[test_samples, ]
svm.linear <- tune.svm(labels ~ ., data = train, cost = seq(0.001, 0.06, 0.002), kernel = "linear")
svm.linear
plot(svm.linear)
linear_predict <- predict(svm.linear$best.model, test[,-1])
linear_error <- mean(linear_predict != test[,1])
linear_error
svm.nonlinear <- tune.svm(labels ~ ., data = train, cost = seq(1, 10, 2), gamma = seq(0.004, 0.04, 0.004),
kernel = "radial")
?seq
pnorm(1.64)
1-pnorm(1.64)
dnorm(1.64)
packages.used=c("caret","gbm", "e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "EBImage", "mxnet", "pbapply", "ggthemes")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
#library(EBImage)
#library(mxnet)
library(pbapply)
library(ggthemes)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
LR_hog <- train_lr(train_hog)
LR_hog <- train_lr.cv(train_hog)
datasplit_hog <- data_split("hog_extraction1")
train_hog <- datasplit_hog$df_train
test_hog <- datasplit_hog$df_test
LR_hog <- train_lr.cv(train_hog)
save(LR_hog,file="../output/LR_hog.RData")
load("../output/LR_hog.RData")
LR_hog.time <- LR_hog$time
LR_hog.time
LR.test.result_hog <- test(LR_hog, test_hog)
LR.test.accuracy_hog <- mean(LR.test.result_hog == test_hog[,1])
LR.test.accuracy_hog
install.packages("mxnet")
library(mxnet)
?arima.sim
?ts.plot
train3 <- read.csv("train_3.txt", header = FALSE)
train8 <- read.csv("train_8.txt", header = FALSE)
train_complete <- rbind(train3, train8)
labels <- c(rep(1, nrow(train3)), rep(-1, nrow(train8)))
labels <- as.factor(labels)
?classify
library(MASS)
data1 <-data("birthwt")
class(birthwt$ptl)
library(MASS)
data1 <-data("birthwt")
fit.mult = glm(low ~ I(ptl > 0) + age, data = birthwt, family='binomial')
summary(fit.mult)
?legend
View(birthwt)
age_LOE_25 <- data1[data1$age <= 25, ]
age_More_25 <- data1[data1$age > 25, ]
age_LOE_25 <- birthwt[birthwt$age <= 25, ]
age_More_25 <- birthwt[birthwt$age > 25, ]
prob1 <- sum(age_LOE_25[age_LOE_25$ptl>0, ]$lwt == 1)/nrow(age_LOE_25)
prob1
prob1 <- sum(age_LOE_25[age_LOE_25$ptl > 0, ]$low == 1)/nrow(age_LOE_25)
prob1
prob2 <- sum(age_More_25[age_More_25$ptl == 0, ]$low == 1)/nrow(age_More_25)
prob2
prob1 <- sum(age_LOE_25[age_LOE_25$ptl > 0, ]$low == 1)/nrow(age_LOE_25[age_LOE_25$ptl > 0, ])
prob1
prob2 <- sum(age_More_25[age_More_25$ptl == 0, ]$low == 1)/nrow(age_More_25$ptl == 0, ])
prob2
prob2 <- sum(age_More_25[age_More_25$ptl == 0, ]$low == 1)/nrow(age_LOE_25[age_More_25$ptl == 0, ])
prob2
prob1 <- sum(age_LOE_25[age_LOE_25$ptl > 0, ]$low == 1)/nrow(age_LOE_25[age_LOE_25$ptl > 0, ])
prob1
prob2 <- sum(age_More_25[age_More_25$ptl == 0, ]$low == 1)/nrow(age_LOE_25[age_More_25$ptl == 0, ])
prob2
prob2 <- sum(age_More_25[age_More_25$ptl == 0, ]$low == 1)/nrow(age_More_25[age_More_25$ptl == 0, ])
prob2
source("prediction.R")
setwd("C:/StudyLife/Columbia/STAT 5243/Project 2/Spring2018-Project4-grp6/lib")
source("prediction.R")
source("find_neighbours.R")
MS_weights <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/MS_Spearman_weights.csv")
Movie_weights <- read.csv("../data/Movie_Spearman_weights.csv")
Movie_weights <- read.csv("../data/Movie_Spearman_weights.csv")
Movie_weights <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_Spearman_weights.csv")
MS_neighbors <- find_neighbours(Movie_weights, method = "combined" ,threshold = 0.01, n = 20)
MS_neighbors <- find_neighbours(Movie_weights, method = "bestn" , n = 10)
MS_neighbors <- find_neighbours(Movie_weights[,-1], method = "bestn" , n = 10)
evaluation_roc <- function(roc_value, pred_mat, Movie_test){
## function to calculate ROC of predicted value
## Input: roc_value= 4 (according to the paper 2)
##        pred_mat - predicted value
##        test_mat - test data matrix
## Output: roc
roc_mat <- matrix(roc_value, nrow = nrow(pred_mat), ncol = ncol(pred_mat))
same <- sum((pred_mat >= roc_mat) == (Movie_test >= roc_mat), na.rm=TRUE)
n <- sum(!is.na(pred_mat))
return(same/n)
}
evaluation_mae <- function(pred_mat, Movie_test){
## function to calculate mean absolute error of predicted value
## Input: pred_mat - predicted value
##        Movie_test - test data matrix
## Output: MAE
mae <- mean(abs(pred_mat - Movie_test), na.rm = T)
return(mae)
}
prediction<-function(df,sim_mat,nbor_list){
library(matrixStats)
df.mean<-matrix(rep(rowMeans(df,na.rm=T),each=ncol(df)),nrow=nrow(df),byrow = T)
df.sd<-matrix(rep(rowSds(df,na.rm=T),each=ncol(df)),nrow=nrow(df),byrow = T)
df<-ifelse(is.na(df),0,df)
pred<-matrix(NA,ncol=ncol(df),nrow=nrow(df))
for (i in 1:nrow(df)){
ind<-nbor_list[[i]]
nbors_mat<-df[ind,]
w<-sim_mat[i,ind]/sum(sim_mat[i,ind])
pred.a<- df.mean[i,1] + (w %*% ((nbors_mat-df.mean[ind,])/df.sd[ind,])) * df.sd[i,1]
rm.ind<-which(df[i,]==1)
pred.a[rm.ind]<-NA
pred[i,]<-pred.a
}
rownames(pred)<-rownames(df)
colnames(pred)<-colnames(df)
return(pred)
}
data1 <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_data_train.csv")
movie_prediction <- prediction(data1, Movie_weights, MS_neighbors)
prediction<-function(df,sim_mat,nbor_list){
library(matrixStats)
df.mean<-matrix(rep(rowMeans(df,na.rm=T),each=ncol(df)),nrow=nrow(df),byrow = T)
df.sd<-matrix(rep(rowSds(df,na.rm=T),each=ncol(df)),nrow=nrow(df),byrow = T)
df<-ifelse(is.na(df),0,df)
pred<-matrix(NA,ncol=ncol(df),nrow=nrow(df))
for (i in 1:nrow(df)){
ind<-nbor_list[[i]]
nbors_mat<-df[ind,]
w<-as.matrix(sim_mat[i,ind]/sum(sim_mat[i,ind]))
pred.a<- df.mean[i,1] + (w %*% ((nbors_mat-df.mean[ind,])/df.sd[ind,])) * df.sd[i,1]
rm.ind<-which(df[i,]==1)
pred.a[rm.ind]<-NA
pred[i,]<-pred.a
}
rownames(pred)<-rownames(df)
colnames(pred)<-colnames(df)
return(pred)
}
movie_prediction <- prediction(data1, Movie_weights, MS_neighbors)
prediction<-function(df,sim_mat,nbor_list){
library(matrixStats)
df.mean<-matrix(rep(rowMeans(df,na.rm=T),each=ncol(df)),nrow=nrow(df),byrow = T)
df.sd<-matrix(rep(rowSds(df,na.rm=T),each=ncol(df)),nrow=nrow(df),byrow = T)
df<-ifelse(is.na(df),0,df)
pred<-matrix(NA,ncol=ncol(df),nrow=nrow(df))
for (i in 1:nrow(df)){
ind<-nbor_list[[i]]
nbors_mat<-df[ind,]
w<-as.matrix(sim_mat[i,ind]/sum(sim_mat[i,ind]))
pred.a<- df.mean[i,1] + (w %*% ((nbors_mat-df.mean[ind,])/df.sd[ind,])) * df.sd[i,1]
rm.ind<-which(df[i,]==1)
pred.a[rm.ind]<-NA
pred[i,]<-pred.a
}
rownames(pred)<-rownames(df)
colnames(pred)<-colnames(df)
return(pred)
}
movie_prediction <- prediction(data1, Movie_weights, MS_neighbors)
prediction<-function(df,sim_mat,nbor_list){
library(matrixStats)
df<-as.matrix(df)
df.mean<-matrix(rep(rowMeans(df,na.rm=T),each=ncol(df)),nrow=nrow(df),byrow = T)
df.sd<-matrix(rep(rowSds(df,na.rm=T),each=ncol(df)),nrow=nrow(df),byrow = T)
df<-ifelse(is.na(df),0,df)
pred<-matrix(NA,ncol=ncol(df),nrow=nrow(df))
for (i in 1:nrow(df)){
ind<-nbor_list[[i]]
nbors_mat<-df[ind,]
w<-as.matrix(sim_mat[i,ind]/sum(sim_mat[i,ind]))
pred.a<- df.mean[i,1] + (w %*% ((nbors_mat-df.mean[ind,])/df.sd[ind,])) * df.sd[i,1]
rm.ind<-which(df[i,]==1)
pred.a[rm.ind]<-NA
pred[i,]<-pred.a
}
rownames(pred)<-rownames(df)
colnames(pred)<-colnames(df)
return(pred)
}
movie_prediction <- prediction(data1, Movie_weights, MS_neighbors)
movietest <- read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_data_test.csv")
eval1 <- evaluation_roc(4, movie_prediction, movietest)
eval1 <- evaluation_roc(4, as.matrix(movie_prediction), as.matrix(movietest))
eval1 <- evaluation_roc(4, as.matrix(movie_prediction), as.matrix(movietest))
class(movietest)
as.matrix(movietest)
eval1 <- evaluation_roc(4, as.matrix(movie_prediction), as.matrix(movietest))
movietest <- as.matrix(read.csv("C:/StudyLife/Columbia/STAT 5243/Local Project 4/Each Movie Case/Movie_data_test.csv"))
eval1 <- evaluation_roc(4, as.matrix(movie_prediction), movietest)
head(movietest)
